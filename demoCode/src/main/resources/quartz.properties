##这个东西随便取的，自己开心就好
#org.quartz.scheduler.instanceName=testaaaaaa
##最多有5个任务同时在执行，如果有第六个任务将会被搁置
#org.quartz.threadPool.threadCount=5
##如果用内存记录定时任务信息，应用重新启动后，定时任务信息将会丢失。
## 比如，用户A通过系统设置1小时后执行Z操作，设置好后的，因系统重新启动，新启动的系统将会丢失“1小时后执行Z操作”的定时任务。
##org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore
##如果，我们需要在系统意外（或非意外）重新启动后，仍保留定时任务信息，可以使用数据库存储定时任务信息。
#org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
##方言：org.quartz.impl.jdbcjobstore.StdJDBCDelegate---用于完全符合JDBC的驱动程序
#org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
##表的前缀--- 默认就是QRTZ_
#org.quartz.jobStore.tablePrefix=QRTZ_
##配置quartz数据库，优势就是可以和业务数据库分开，相当于配置了两个数据库
#org.quartz.jobStore.dataSource=myDS
#org.quartz.dataSource.myDS.driver=com.mysql.cj.jdbc.Driver
#org.quartz.dataSource.myDS.URL=jdbc:mysql://localhost:3305/testquartzjob?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&useSSL=false
#org.quartz.dataSource.myDS.user=root
#org.quartz.dataSource.myDS.password=666666
##最大连接数
#org.quartz.dataSource.myDS.maxConnections=5


# 实例化ThreadPool时，使用的线程类为SimpleThreadPool
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
# threadCount和threadPriority将以setter的形式注入ThreadPool实例
# 并发个数
org.quartz.threadPool.threadCount = 5
# 优先级
org.quartz.threadPool.threadPriority = 5
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread = true
org.quartz.jobStore.misfireThreshold = 5000
#持久化使用的类
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
#数据库中表的前缀
org.quartz.jobStore.tablePrefix = QRTZ_
#数据源命名
org.quartz.jobStore.dataSource = qzDS
#qzDS 数据源
org.quartz.dataSource.qzDS.driver = com.mysql.jdbc.Driver
org.quartz.dataSource.qzDS.URL = jdbc:mysql://localhost:3305/testquartzjob?useUnicode=true&characterEncoding=UTF-8
org.quartz.dataSource.qzDS.user = root
org.quartz.dataSource.qzDS.password = 666666
org.quartz.dataSource.qzDS.maxConnections = 10


